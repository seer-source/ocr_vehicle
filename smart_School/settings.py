"""
Django settings f or smart_School project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c)(zz@e67e78vx$h9qy-i4h9(1$wd&a6yyg$x7-&mso*vwh+x5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize', 
    'home',
    'app_resources',
    'reports',
    'livefeed',
    'authentications',
    'dashboard',
    'config',
    'vehicle'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware'
]

ROOT_URLCONF = 'smart_School.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smart_School.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
  
DATABASES = { 
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':'test',
        'USER': 'postgres',
        'PASSWORD': 'mahm01142',
        'HOST':  'localhost',
        'PORT': 5432,
    }
}


AUTH_USER_MODEL = 'authentications.User'
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EET'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = ['static']

# Base url to serve media files
MEDIA_URL = '/media/'

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
import face_recognition
import numpy as np
from PIL import Image, ImageDraw
DATA_UPLOAD_MAX_MEMORY_SIZE = 15242880
# This is an example of running face recognition on a single image
# and drawing a box around each person that was identified.


# Load a sample picture and learn how to recognize it.
# Create arrays of known face encodings and their names
'''KNOW_FACE_ENCODINGS = [
    
]

KNOW_FACE_NAMES = [ 

]
from PIL import Image
import glob
image_list = []
for Imagename in glob.glob('./media/faces2/*.jpg'):
    
    image = face_recognition.load_image_file(Imagename)
    face_encoding = face_recognition.face_encodings(image)[0]
    KNOW_FACE_ENCODINGS.append(face_encoding)
    KNOW_FACE_NAMES.append(Imagename.split('/')[-1].split('.')[0])
print(KNOW_FACE_NAMES)    



print('Learned encoding for', len(KNOW_FACE_ENCODINGS), 'images.')'''


import json
import face_recognition
from PIL import Image
import glob
import os
from json import JSONEncoder


class NumpyArrayEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return JSONEncoder.default(self, obj)



KNOW_FACE_ENCODINGS = []
KNOW_FACE_NAMES = []

# Process images and store face encodings
for imagename in glob.glob('./media/faces2/*.jpg'):
    # Create a unique JSON filename based on the image name
    json_filename = imagename.replace('.jpg', '_encoding.json')

    if os.path.exists(json_filename):
        print(json_filename)
        with open(json_filename, "r") as read_file:
            decodedArray = json.load(read_file)
            face_encoding = np.array(decodedArray)

            #print(f'Loaded encoding for {loaded_name} from {json_filename}')
            KNOW_FACE_ENCODINGS.append(face_encoding)
            KNOW_FACE_NAMES.append(imagename.split('/')[-1].split('.')[0])
    else:
        # Compute face encoding
        image = face_recognition.load_image_file(imagename)
        face_locations = face_recognition.face_locations(image, number_of_times_to_upsample=2)

        face_encoding = face_recognition.face_encodings(image, known_face_locations=face_locations, num_jitters=100)[0]

        # Save face encoding to JSON file
        with open(json_filename, "w") as write_file:
            json.dump(face_encoding, write_file, cls=NumpyArrayEncoder)
        #save_face_encoding_to_json(face_encoding, imagename.split('/')[-1].split('.')[0], json_filename)
        print(f'Processed: {imagename}')
        KNOW_FACE_ENCODINGS.append(face_encoding)
        KNOW_FACE_NAMES.append(imagename.split('/')[-1].split('.')[0])

print(KNOW_FACE_NAMES)
print('Learned encoding for', len(KNOW_FACE_ENCODINGS), 'images.')
